{
    "openapi": "3.0.2",
    "info": {
        "title": "Apicurio API Designer API",
        "version": "1.0.0-SNAPSHOT",
        "description": "The REST API for the back-end component of the Apicurio API Designer.",
        "contact": {
            "name": "Apicurio",
            "url": "https://github.com/apicurio/apicurio-api-designer",
            "email": "apicurio@lists.jboss.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "paths": {
        "/admin/config/properties": {
            "summary": "Manage configuration properties.",
            "get": {
                "tags": [
                    "Admin"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigurationProperty"
                                    }
                                }
                            }
                        },
                        "description": "On a successful response, returns a list of configuration properties."
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "listConfigProperties",
                "summary": "List all configuration properties",
                "description": "Returns a list of all configuration properties that have been set.  The list is not paged.\n\nThis operation may fail for one of the following reasons:\n\n* A server error occurred (HTTP error `500`)\n"
            }
        },
        "/admin/config/properties/{propertyName}": {
            "summary": "Manage a single configuration property (by name).",
            "get": {
                "tags": [
                    "Admin"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationProperty"
                                }
                            }
                        },
                        "description": "The configuration property value."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "getConfigProperty",
                "summary": "Get configuration property value",
                "description": "Returns the value of a single configuration property.\n\nThis operation may fail for one of the following reasons:\n\n* Property not found or not configured (HTTP error `404`)\n* A server error occurred (HTTP error `500`)\n"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateConfigurationProperty"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Admin"
                ],
                "responses": {
                    "204": {
                        "description": "The configuration property was updated."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "updateConfigProperty",
                "summary": "Update a configuration property",
                "description": "Updates the value of a single configuration property.\n\nThis operation may fail for one of the following reasons:\n\n* Property not found or not configured (HTTP error `404`)\n* A server error occurred (HTTP error `500`)\n"
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "responses": {
                    "204": {
                        "description": "The configuration property was deleted."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "resetConfigProperty",
                "summary": "Reset a configuration property",
                "description": "Resets the value of a single configuration property.  This will return the property to\nits default value (see external documentation for supported properties and their default\nvalues).\n\nThis operation may fail for one of the following reasons:\n\n* Property not found or not configured (HTTP error `404`)\n* A server error occurred (HTTP error `500`)\n"
            },
            "parameters": [
                {
                    "name": "propertyName",
                    "description": "The name of a configuration property.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "ConfigurationProperty": {
                "title": "Root Type for ConfigurationProperty",
                "description": "",
                "required": [
                    "name",
                    "value",
                    "type",
                    "label",
                    "description"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "type": {
                        "description": "",
                        "type": "string"
                    },
                    "label": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "registry.auth.owner-only-authorization",
                    "value": "true",
                    "type": "boolean",
                    "label": "Owner Only Authorization",
                    "description": "When enabled, the registry will allow only the artifact owner (creator) to modify an artifact."
                }
            },
            "Error": {
                "title": "Root Type for Error",
                "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
                "type": "object",
                "properties": {
                    "message": {
                        "description": "The short error message.",
                        "type": "string"
                    },
                    "error_code": {
                        "format": "int32",
                        "description": "The server-side error code.",
                        "type": "integer"
                    },
                    "detail": {
                        "description": "Full details about the error.  This might contain a server stack trace, for example.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The error name - typically the classname of the exception thrown by the server.",
                        "type": "string"
                    }
                },
                "example": {
                    "error_code": 500,
                    "message": "An error occurred somewhere."
                }
            },
            "UpdateConfigurationProperty": {
                "title": "Root Type for UpdateConfigurationProperty",
                "description": "",
                "required": [
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "example": {
                    "value": "true"
                }
            }
        },
        "responses": {
            "ServerError": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        },
                        "examples": {
                            "ErrorExample": {
                                "value": {
                                    "error_code": 500,
                                    "message": "Lost connection to the database."
                                }
                            }
                        }
                    }
                },
                "description": "Common response for all operations that can fail with an unexpected server error."
            },
            "BadRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Common response for all operations that can return a `400` error."
            },
            "Conflict": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        },
                        "examples": {
                            "ConflictExample": {
                                "value": {
                                    "error_code": 409,
                                    "message": "The artifact content was invalid."
                                }
                            }
                        }
                    }
                },
                "description": "Common response used when an input conflicts with existing data."
            },
            "NotFound": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        },
                        "examples": {
                            "NotFoundExample": {
                                "value": {
                                    "error_code": 404,
                                    "message": "No artifact with id 'Topic-1/Inbound' could be found."
                                }
                            }
                        }
                    }
                },
                "description": "Common response for all operations that can return a `404` error."
            }
        }
    },
    "tags": [
        {
            "name": "Admin",
            "description": "Application functionality that is only accessible to admin users.  Includes logging, global rules, and export/import of registry data."
        }
    ],
    "x-codegen": {
        "bean-annotations": [
            "io.quarkus.runtime.annotations.RegisterForReflection",
            {
                "annotation": "lombok.ToString",
                "excludeEnums": true
            }
        ]
    }
}